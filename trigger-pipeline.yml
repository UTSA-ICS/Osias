default:
  # Official language image. Look for the different tagged releases at:
  # https://hub.docker.com/r/library/python/tags/
  image: python:3.7-buster
  #interruptible: true
  tags:
    - docker-runner

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

stages:
  - prepare
  - deploy

handle-yaml:
  stage: prepare
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: generate_yaml_config
  script:
    - echo "This job only exists to handle the YAML"
    - echo "$MULTINODE"
  artifacts:
    paths:
      - deploy*.yml

tag_virtual_servers:
  stage: prepare
  image: utsaics/maas:2.8
  before_script:
    - pip3 install toml timeout_decorator
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    VM_PROFILE_CURRENT_RELEASE: $VM_PROFILE_CURRENT_RELEASE
    VM_PROFILE_PREVIOUS_RELEASE: $VM_PROFILE_PREVIOUS_RELEASE
    VM_PROFILE: $VM_PROFILE
    MULTINODE_CURRENT_RELEASE: $MULTINODE_CURRENT_RELEASE
    MULTINODE_PREVIOUS_RELEASE: $MULTINODE_PREVIOUS_RELEASE
  script:
    - |
      if [[ $DEPLOY_MULTIPLE_RELEASES == "true" ]]; then
          python3 -u deploy.py tag_virtual_servers --VM_PROFILE "$VM_PROFILE_CURRENT_RELEASE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY" 
          python3 -u deploy.py tag_virtual_servers --VM_PROFILE "$VM_PROFILE_PREVIOUS_RELEASE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY"
      else
          python3 -u deploy.py tag_virtual_servers --VM_PROFILE "$VM_PROFILE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY" 
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline" && ($MULTINODE_CURRENT_RELEASE == "" || $MULTINODE_CURRENT_RELEASE == null)'
    - if: '$CI_PIPELINE_SOURCE == "push" && ($MULTINODE_CURRENT_RELEASE == "" || $MULTINODE_CURRENT_RELEASE == null)'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($MULTINODE_CURRENT_RELEASE == "" || $MULTINODE_CURRENT_RELEASE == null)'
    - if: '$CI_PIPELINE_SOURCE == "web" && ($MULTINODE_CURRENT_RELEASE == "" || $MULTINODE_CURRENT_RELEASE == null)'

reprovision_servers:
  stage: prepare
  image: utsaics/maas:2.8
  before_script:
    # Setup and add SSH_PRIVATE_KEY to ssh agent
    - "which ssh-agent || ( apt-get update -qqy && apt-get install openssh-client -qqy )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - pip3 install toml timeout_decorator
    - if [ -z "$MULTINODE_CURRENT_RELEASE" ] && [ -f MULTINODE.env ]; then export MULTINODE="$(cat MULTINODE.env)"; fi
    - echo "$MULTINODE"
  variables:
    MULTINODE_CURRENT_RELEASE: $MULTINODE_CURRENT_RELEASE
    MULTINODE_PREVIOUS_RELEASE: $MULTINODE_PREVIOUS_RELEASE
  script:
    - |
      if [[ $DEPLOY_MULTIPLE_RELEASES == "true" ]]; then
          python3 -u deploy.py reprovision_servers --config "$MULTINODE_CURRENT_RELEASE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY"
          python3 -u deploy.py reprovision_servers --config "$MULTINODE_PREVIOUS_RELEASE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY"
      else
          python3 -u deploy.py reprovision_servers --config "$MULTINODE_CURRENT_RELEASE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY"
      fi
  rules:
    - if: '$MULTINODE_CURRENT_RELEASE == "" || $MULTINODE_CURRENT_RELEASE == null'
      when: never
    - if: '$REPROVISION_SERVERS == "false"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline" && ($MULTINODE_CURRENT_RELEASE != "" || $MULTINODE_CURRENT_RELEASE != null)'
    - if: '$CI_PIPELINE_SOURCE == "push" && ($MULTINODE_CURRENT_RELEASE != "" || $MULTINODE_CURRENT_RELEASE != null)'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($MULTINODE_CURRENT_RELEASE != "" || $MULTINODE_CURRENT_RELEASE != null)'
    - if: '$CI_PIPELINE_SOURCE == "web" && ($MULTINODE_CURRENT_RELEASE != "" || $MULTINODE_CURRENT_RELEASE != null)'


deploy:<RELEASE_NAME>:
  stage: deploy
  trigger:
    include:
      - artifact: deploy-<RELEASE_NAME>.yml
        job: handle-yaml
    strategy: depend
  variables:
    DOCKER_REGISTRY_PASSWORD: $DOCKER_REGISTRY_PASSWORD
    MULTINODE_CURRENT_RELEASE: $MULTINODE_CURRENT_RELEASE
    MULTINODE_PREVIOUS_RELEASE: $MULTINODE_PREVIOUS_RELEASE
    PARENT_PIPELINE_ID: $PARENT_PIPELINE_ID
    REPROVISION_SERVERS: $REPROVISION_SERVERS
    VM_PROFILE: <RELEASE_VM_PROFILE>

deploy:<PREVIOUS_RELEASE_NAME>:
  stage: deploy
  trigger:
    include:
      - artifact: deploy-<PREVIOUS_RELEASE_NAME>.yml
        job: handle-yaml
    strategy: depend
  variables:
    DOCKER_REGISTRY_PASSWORD: $DOCKER_REGISTRY_PASSWORD
    MULTINODE_CURRENT_RELEASE: $MULTINODE_CURRENT_RELEASE
    MULTINODE_PREVIOUS_RELEASE: $MULTINODE_PREVIOUS_RELEASE
    PARENT_PIPELINE_ID: $PARENT_PIPELINE_ID
    REPROVISION_SERVERS: $REPROVISION_SERVERS
    VM_PROFILE: $VM_PROFILE_PREVIOUS_RELEASE
  rules:
    - if: '($DEPLOY_MULTIPLE_RELEASES == "true")'
