default:
  # Official language image. Look for the different tagged releases at:
  # https://hub.docker.com/r/library/python/tags/
  image: python:3.7-buster
  #interruptible: true
  tags:
    - docker-runner

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

stages:
  - prepare
  - cleanup
  - deploy

handle-yaml:
  stage: prepare
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: generate_yaml_config
  script:
    - echo "This job only exists to handle the YAML"
    - echo "$MULTINODE"
    - echo "$CLOUD_PROVIDER"
  artifacts:
    paths:
      - deploy*.yml

tag_virtual_servers:
  stage: prepare
  image: utsaics/maas:2.8
  before_script:
    - pip3 install PyYAML timeout_decorator
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    VM_PROFILE_CURRENT_RELEASE: $VM_PROFILE_CURRENT_RELEASE
    VM_PROFILE_PREVIOUS_RELEASE: $VM_PROFILE_PREVIOUS_RELEASE
    VM_PROFILE: $VM_PROFILE
    MULTINODE: $MULTINODE
    CLOUD_PROVIDER: $CLOUD_PROVIDER
  script:
    - |
      if [[ $DEPLOY_MULTIPLE_RELEASES == "true" ]]; then
          python3 -u deploy.py tag_virtual_servers --VM_PROFILE "$VM_PROFILE_CURRENT_RELEASE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY" --CLOUD_PROVIDER "$CLOUD_PROVIDER"
          python3 -u deploy.py tag_virtual_servers --VM_PROFILE "$VM_PROFILE_PREVIOUS_RELEASE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY" --CLOUD_PROVIDER "$CLOUD_PROVIDER"
      else
          python3 -u deploy.py tag_virtual_servers --VM_PROFILE "$VM_PROFILE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY" --CLOUD_PROVIDER "$CLOUD_PROVIDER"
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline" && ($MULTINODE == "" || $MULTINODE == null)'
    - if: '$CI_PIPELINE_SOURCE == "push" && ($MULTINODE == "" || $MULTINODE == null)'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($MULTINODE == "" || $MULTINODE == null)'
    - if: '$CI_PIPELINE_SOURCE == "web" && ($MULTINODE == "" || $MULTINODE == null)'

delete_tags_and_ips:
  stage: cleanup
  image: utsaics/maas:2.8
  before_script:
    - pip3 install PyYAML timeout_decorator
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    CLOUD_PROVIDER: $CLOUD_PROVIDER
  script:
    - echo "This job only exists to cleanup IPs and tagging with a failed prepare"
    - python3 -u deploy.py delete_tags_and_ips --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY" --CLOUD_PROVIDER "$CLOUD_PROVIDER"
  rules:
    - if: '($MULTINODE == "" || $MULTINODE == null)  && $VM_PROFILE_CURRENT_RELEASE != null'
      when: on_failure

deploy:<RELEASE_NAME>:
  stage: deploy
  trigger:
    include:
      - artifact: deploy-<RELEASE_NAME>.yml
        job: handle-yaml
    strategy: depend
  variables:
    CEPH: <CEPH_CURRENT_BOOL>
    DOCKER_REGISTRY_PASSWORD: $DOCKER_REGISTRY_PASSWORD
    MULTINODE: $MULTINODE
    PARENT_PIPELINE_ID: $PARENT_PIPELINE_ID
    REPROVISION_SERVERS: $REPROVISION_SERVERS
    VM_PROFILE: <RELEASE_VM_PROFILE>
    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
    MAAS_URL: $MAAS_URL
    MAAS_API_KEY: $MAAS_API_KEY
    CLOUD_PROVIDER: $CLOUD_PROVIDER

deploy:<PREVIOUS_RELEASE_NAME>:
  stage: deploy
  trigger:
    include:
      - artifact: deploy-<PREVIOUS_RELEASE_NAME>.yml
        job: handle-yaml
    strategy: depend
  variables:
    CEPH: <CEPH_PREVIOUS_BOOL>
    DOCKER_REGISTRY_PASSWORD: $DOCKER_REGISTRY_PASSWORD
    MULTINODE: $MULTINODE
    PARENT_PIPELINE_ID: $PARENT_PIPELINE_ID
    REPROVISION_SERVERS: $REPROVISION_SERVERS
    VM_PROFILE: $VM_PROFILE_PREVIOUS_RELEASE
    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
    MAAS_URL: $MAAS_URL
    MAAS_API_KEY: $MAAS_API_KEY
    CLOUD_PROVIDER: $CLOUD_PROVIDER
  rules:
    - if: '($DEPLOY_MULTIPLE_RELEASES == "true")'
